[{"authors":["admin"],"categories":null,"content":"I am a fifth-year graduate student in Computer Science at Princeton University advised by Professor Margaret Martonosi. My broad area of research is Computer Architecture and more specifically, I am interested in optimizing data supply and memory management for graph applications. Throughout my PhD, I have been a contributor to the DECADES project, a full-stack system design that aims to improve the performance, power, and programmability of several emerging workflows in the broad areas of machine learning and graph analytics. This platform rapidly adapts to the increasingly flexible and blurred boundary between software and hardware through various reconfigurable hardware features, depending on application characteristics. I have developed hardware-software co-design and memory hierarchy approaches and am currently designing operating system techniques to address the memory latency bottlenecks of irregular workloads in the domains of graph and sparse applications.\nPreviously, I worked with Professor Benjamin C. Lee at Duke University, where I received my bachelor\u0026rsquo;s degrees in Electrical and Computer Engineering as well as Computer Science. My research involved investigating distributed systems, characterizing crowd computing and mobile architectures, and enabling efficient hardware accelerator design via statistical learning for high-level synthesis parameter tuning.\nI am also a recipient of the NSF Graduate Research Fellowship and I am a 2017 Duke Technology Scholar.\n","date":-62135596800,"expirydate":-62135596800,"kind":"taxonomy","lang":"en","lastmod":-62135596800,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"http://www.amanocha.github.io/authors/admin/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/admin/","section":"authors","summary":"I am a fifth-year graduate student in Computer Science at Princeton University advised by Professor Margaret Martonosi. My broad area of research is Computer Architecture and more specifically, I am interested in optimizing data supply and memory management for graph applications. Throughout my PhD, I have been a contributor to the DECADES project, a full-stack system design that aims to improve the performance, power, and programmability of several emerging workflows in the broad areas of machine learning and graph analytics.","tags":null,"title":"Aninda Manocha","type":"authors"},{"authors":["Aninda Manocha","Zi Yan","Esin Tureci","Juan Luis Aragón","David Nellans","Margaret  Martonosi"],"categories":null,"content":"","date":1661990400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1661990400,"objectID":"7e719942013e6d7f06729b89298788fa","permalink":"http://www.amanocha.github.io/publication/iiswc22/","publishdate":"2022-09-01T00:00:00Z","relpermalink":"/publication/iiswc22/","section":"publication","summary":"_IEEE International Symposium on Workload Characterization (IISWC)_, 2022","tags":["graph analytics","huge pages","operating systems","virtual memory"],"title":"The Implications of Page Size Management on Graph Analytics","type":"publication"},{"authors":["Marcelo Orenes Vera","Aninda Manocha","Jonathan Balkind","Fei Gao","Juan Luis Aragón","Margaret  Martonosi"],"categories":null,"content":"","date":1646697600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1646697600,"objectID":"581d2b696198b139051d917810f9e676","permalink":"http://www.amanocha.github.io/publication/maple/","publishdate":"2022-03-08T00:00:00Z","relpermalink":"/publication/maple/","section":"publication","summary":"_Proceedings of the International Symposium on Computer Architecture (ISCA)_, 2022","tags":["hardware","latency tolerance","parallelism","heterogeneous systems","many-core architectures"],"title":"Tiny but Mighty: Designing and Realizing Scalable Latency Tolerance for Manycore SoCs","type":"publication"},{"authors":["Aninda Manocha","Juan Luis Aragón","Margaret  Martonosi"],"categories":null,"content":"","date":1646092800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1646092800,"objectID":"b6ab191520d2b9a33010f9e19cd5ce83","permalink":"http://www.amanocha.github.io/publication/graphfire/","publishdate":"2022-03-01T00:00:00Z","relpermalink":"/publication/graphfire/","section":"publication","summary":"_IEEE Transactions on Computers_, 2022","tags":["graph analytics","caches","memory hierarchy","multi-core architectures"],"title":"GraphFire: Synergizing Fetch, Insertion, and Replacement Policies for Graph Analytics","type":"publication"},{"authors":["Esin Tureci","Aninda Manocha","and Marcelo Orenes Vera"],"categories":null,"content":"","date":1637230500,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1637230500,"objectID":"e3b2f74f364b322ecfedb2a594f102e8","permalink":"http://www.amanocha.github.io/talk/dortmund_seminar/","publishdate":"2021-11-18T00:00:00Z","relpermalink":"/talk/dortmund_seminar/","section":"talk","summary":"Collaborative Research Center SFB 876 Topical Seminar","tags":["energy efficiency","graph applications","hardware-software co-design","heterogeneity","latency tolerance","multi-core architectures","parallelism","verilog","hardware","software"],"title":"GraphAttack+MAPLE: Optimizing Data Supply for Graph Applications on In-Order Multicore Architectures","type":"talk"},{"authors":["Marcelo Orenes Vera","Aninda Manocha","David Wentzlaff","Margaret  Martonosi"],"categories":null,"content":"","date":1625097600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1625097600,"objectID":"d9ec99ef6d1fef828dd3c2e3fafc2ab9","permalink":"http://www.amanocha.github.io/publication/autosva/","publishdate":"2021-07-01T00:00:00Z","relpermalink":"/publication/autosva/","section":"publication","summary":"_Proceedings of the 58th ACM/IEEE Design Automation Conference (DAC)_, 2021","tags":["automatic","hardware","modular","formal verification","SVA"],"title":"AutoSVA: Democratizing Formal Verification of RTL Module Interactions","type":"publication"},{"authors":["Aninda Manocha","Tyler Sorensen","Esin Tureci","Opeoluwa Matthews","Juan Luis Aragón","Margaret  Martonosi"],"categories":null,"content":"","date":1625097600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1625097600,"objectID":"92f781fe5f61f469ef9c192b2829be4b","permalink":"http://www.amanocha.github.io/publication/graphattack/","publishdate":"2021-07-01T00:00:00Z","relpermalink":"/publication/graphattack/","section":"publication","summary":"_ACM Transactions on Architecture and Code Optimization (TACO)_, 2021","tags":["graph analytics","hardware-software co-design","parallelism","heterogeneous systems","multi-core architectures"],"title":"GraphAttack: Optimizing Data Supply for Graph Applications on In-Order Multicore Architectures","type":"publication"},{"authors":["Tyler Sorensen","Aninda Manocha","Esin Tureci","Marcelo Orenes Vera","Juan L. Aragón","Margaret Martonosi"],"categories":null,"content":"","date":1604275200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1604275200,"objectID":"b67f0ec5af570ae677e35ecc3cb9be76","permalink":"http://www.amanocha.github.io/publication/decpp/","publishdate":"2020-01-01T00:00:00Z","relpermalink":"/publication/decpp/","section":"publication","summary":"_The IEEE/ACM International Conference on Computer-Aided Design (ICCAD)_, 2020","tags":["hardware-software co-design","heterogeneous systems","LLVM simulation","performance modeling"],"title":"[Invited Talk] A Simulator and Compiler Framework for Agile Hardware-Software Co-design Evaluation and Exploration","type":"publication"},{"authors":["Atefeh Mehrabi","Aninda Manocha","Benjamin C. Lee","Daniel J. Sorin"],"categories":null,"content":"","date":1601337600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1601337600,"objectID":"d69a9e58d8da8a20effe937996b75f28","permalink":"http://www.amanocha.github.io/publication/prospector_taco/","publishdate":"2020-09-01T00:00:00Z","relpermalink":"/publication/prospector_taco/","section":"publication","summary":"_ACM Transactions on Architecture and Code Optimization (TACO)_, 2020","tags":["Bayesian optimization","design space exploration","FPGA","high-level synthesis"],"title":"Bayesian Optimization for Efficient Accelerator Synthesis","type":"publication"},{"authors":["Opeoluwa Matthews","Aninda Manocha","Davide Giri","Marcelo Orenes Vera","Esin Tureci","Tyler Sorensen","Tae Jun Ham","Juan L. Aragón","Luca P. Carloni","Margaret Martonosi"],"categories":null,"content":"","date":1598227200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1598227200,"objectID":"884cd9660addac49af3add17ccb2026f","permalink":"http://www.amanocha.github.io/publication/mosaicsim/","publishdate":"2020-01-01T00:00:00Z","relpermalink":"/publication/mosaicsim/","section":"publication","summary":"_The IEEE International Symposium on Performance Analysis of Systems and Software (ISPASS)_, 2020 Nominated for Best Paper Award","tags":["accelerators","architectures","heterogeneity","multi-core architectures","performance modeling"],"title":"MosaicSim: A Lightweight, Modular Simulator for Heterogeneous Systems","type":"publication"},{"authors":["Atefeh Mehrabi","Aninda Manocha","Benjamin C. Lee","Daniel J. Sorin"],"categories":null,"content":"","date":1583712000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1583712000,"objectID":"ceae6c0dafe0d740d05bfcc36e9ff62e","permalink":"http://www.amanocha.github.io/publication/prospector_date/","publishdate":"2019-01-01T00:00:00Z","relpermalink":"/publication/prospector_date/","section":"publication","summary":"_Conference on Design, Automation, and Test in Europe (DATE)_, 2020","tags":["Bayesian optimization","design space exploration","FPGA","high-level synthesis"],"title":"Prospector: Synthesizing Efficient Accelerators via Statistical Learning","type":"publication"},{"authors":["Aninda Manocha","Tyler Sorensen","Esin Tureci","Opeoluwa Matthews","Juan Luis Aragón","Margaret Martonosi"],"categories":null,"content":"","date":1580575200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1580575200,"objectID":"c7c1fa77ee9ed9787129619e8c7f0313","permalink":"http://www.amanocha.github.io/talk/fosdem20/","publishdate":"2020-02-01T00:00:00Z","relpermalink":"/talk/fosdem20/","section":"talk","summary":"FOSDEM 2020 Graph Systems and Algorithms Devroom","tags":["energy efficiency","graph applications","hardware-software co-design","heterogeneity","latency tolerance","multi-core architectures","parallelism"],"title":"Hardware-Software Co-Design for Efficient Graph Application Computations on Emerging Architectures","type":"talk"},{"authors":["Atefeh Mehrabi","Aninda Manocha","Benjamin C. Lee","Daniel J. Sorin"],"categories":null,"content":"","date":1570924800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1570924800,"objectID":"b40f6a48f2219e21967d60d246f18e5e","permalink":"http://www.amanocha.github.io/publication/cwwmca/","publishdate":"2019-01-01T00:00:00Z","relpermalink":"/publication/cwwmca/","section":"publication","summary":"_Career Workshop for Women and Minorities in Computer Architecture (CWWMCA)_, 2019","tags":["accelerators","Bayesian optimization","design space exploration","FPGA","hardware-software co-design","high-level synthesis"],"title":"[Workshop] Prospector: Synthesizing Efficient Accelerators via Statistical Learning","type":"publication"},{"authors":null,"categories":null,"content":"","date":1568160000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1568160000,"objectID":"a7610ba1e5feebc68570db3bcc9b56a4","permalink":"http://www.amanocha.github.io/project/decades/","publishdate":"2019-09-11T00:00:00Z","relpermalink":"/project/decades/","section":"project","summary":"A DARPA-funded project to create specialized, reconfigurable hardware to accelerate important applications.","tags":["accelerators","architecture","compilers","hardware","heterogeneous","research","simulators","software"],"title":"DECADES","type":"project"},{"authors":null,"categories":null,"content":" Introduction   For the final project for my Digital Systems (ECE350) class, my friend and I created an electric keyboard with 13 custom-made keys using digital logic and an FPGA. The user can play up to three notes simultaneously on a physical light/touch-sensitive keyboard, hear the notes played, and see the notes played on a graphical staff as well as their duration in real time. Each piano key has an LED that lights up when that key is pressed, so the user interacts with a light-sensitive circuit. Additionally, when a key is pressed it sends a signal into our software modules, and in particular our processor. The processor performs computations based on the note played in order to determine how to display that note on a musical staff (how long the note has been played and what note was played). A keyboard key is also highlighted on a graphical keyboard based on the note played. There are also three speaker outputs that play the frequency being sent to them from the clock divider.\n Project Specifications    A breadboard with 13 sensing circuits for piano keys made of photoresistors, transistors, and LEDs that will light up in response to user input and also send a signal to the processor: The signal is interpreted to determine what note is pressed. When the note is processed, a piezoelectric speaker plays the sound. This also involves a clock divider module to send pulses at the correct frequencies to the speakers. The notes are mapped to the button inputs in order to select the proper divided clock frequencies and send them to to an amplifier circuit to play sound from the piezoelectric speaker. The processor handles the I/O from all of the notes, stores them in a register, and uses this info to determine how to respond and display the music notes. A custom-designed 3D printed 1-octave piano: This brings the feel of a piano to the circuit, which is important for a good user experience. The print is designed to fit the 13 keys within the dimensions of the breadboard and includes holes for the photo resistors and LEDs to fit through. Ability to push up to three piano keys so that the corresponding keys light up on the screen: The physical key lights update in real time as they are played. This allows the user to see what notes he/she is creating by pressing keys. Display of the music notes played by up to three keys simultaneously on a graphical staff: The notes update after every eighth note of time for as long as the user plays them (up to a whole note). When a note is initially played, it shows up as an eighth note. As it is played for more eighth notes worth of time, the display changes the note from an eighth note (1 unit of time) to a quarter note (2 units of time) to a dotted quarter note (3 units of time) to a half note (4 units of time) to a dotted half note (6 units of time) to a whole note (8 units time). After eight beats, a new eighth note is drawn in an updated x coordinate. The x coordinate for the next note updates based on how much time has passed since the last note was first played. Thus, as time goes on, the notes move across the staff. When the notes reach the end of the staff, they return to the beginning of the staff. There is a \u0026ldquo;reset screen\u0026rdquo; switch to clear all of the notes currently on the screen. The processor takes in all of the signals received from GPIO pins, determines the numbers of the notes played, determines what keys they map to, whether or not the key note length has changed, the coordinates to display the corresponding musical note, and loads and stores the pixel representation and location in memory for the VGA controller (for the display). \n Processor Design   As a precursor to this project, I designed a five-stage pipelined single-issue 32-bit processor that supports 18 MIPS instructions. I additionally modified the register file to allow for:  A clock cycle counter that could be automatically written to, written to from mips, and read from mips  The ability to process musical note inputs  The storage of values that a VGA controller could use to update the graphical staff on the screen   This processor is then programmed onto an FPGA to run MIPS assembly code. I therefore input a MIPS assembly code that runs in a continuous loop to determine what musical notes are currently playing. One register stores a clock cycle counter that increments on every clock cycle. A line of MIPS code checks to see if the clock cycle counter register is at least 25 million because there are 25 million clock 50MHz clock cycles in an eighth note (using a tempo of 60 beats per measure). Other lines of MIPS code are also written assuming certain registers hold certain inputs from the note decoder, or hold outputs that will be accessed by the VGA controller through the processor\u0026rsquo;s output. These include three registers for the note being played, three notes the VGA should display, the x-coordinates of these notes, the note length of each, and a clear screen signal.\nA flowchart detailing our music note calculation logic written in MIPS assembly\n Physical Design   We designed the piano key frame using SketchUp and 3D printed the 13-key model.\nOur SketchUp model\nUnderneath the frame lay a breadboard that contained 13 identical sensing circuits, where each circuit was made up of resistors, a photoresistor, a transistor, and a light-emitting diode (LED). The LED stood up through the top hold in each key and the photoresistor stood up through the bottom hole of each key.\nSensing circuit schematic\nA piano key press was simulated by hovering (or touching) a finger over the edge of the key, where the photoresistor was located. We used an IRLD014 NPN MOSFET as a transistor to control when current should flow from its drain to its source, or from the 1K resistor to ground. The photoresistor was connected to the gate of the MOSFET as well as to a 10K resistor that was grounded. When the photoresistor was covered (received less light), its resistance decreased, so there was a lower voltage drop across it (less of a drop from VCC), which caused the gate voltage to increase. As the gate voltage increased, more current flowed from the drain of the MOSFET to the source and since the IR LED was connected to the drain of the MOSFET, more current flowed from VCC (3 volts) through the 1K resistor and into the LED (labeled \u0026ldquo;TO_DI\u0026rdquo; or \u0026ldquo;to diode\u0026rdquo;). Therefore, covering the photoresistor illuminated the LED and we were able to simulate a key lighting up by hovering a finger over the key.\nThe entire hardware system consisting of an FPGA, sensing circuits for keys, and piezoelectric speakers\nAnd here is a demo of the electric keyboard! \n","date":1512691200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1512691200,"objectID":"e6b0e85c40d440bf158de42becde27ce","permalink":"http://www.amanocha.github.io/project/keyboard/","publishdate":"2017-12-08T00:00:00Z","relpermalink":"/project/keyboard/","section":"project","summary":"An electric keyboard constructed out of an FPGA, a monitor, and 13 sensing circuits and custom-made keys.","tags":["assembly","circuits","fpga","hardware","software","verilog"],"title":"Electric Keyboard","type":"project"}]